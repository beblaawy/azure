{"version":3,"sources":["pages/Employees.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","employeeRow","cursor","filtersContainer","padding","tableRoot","position","progressContainer","top","left","width","height","display","alignItems","justifyContent","background","titleContainer","loadingEmployeeDetailsContainer","minWidth","minHeight","SimpleTable","classes","useState","limit","lastName","firstName","filter","setFilter","userDetails","setUserDetails","limits","loading","setLoading","employees","setEmployees","userDetailsModalOpen","setUserDetailsModalOpen","loadingEmployeeDetails","setLoadingEmployeeDetails","title","key","columns","userDetailsRows","handleCloseUserDetailsModal","handleChangeFilterKey","e","target","value","useEffect","axios","get","params","then","data","finally","Grid","container","justify","item","xs","md","style","component","Paper","Typography","variant","PeopleAlt","className","spacing","Select","fullWidth","onChange","props","map","limitIndex","MenuItem","TextField","placeholder","Dialog","PaperProps","margin","open","onClose","DialogTitle","Person","DialogContent","CircularProgress","size","Table","TableBody","row","rowIndex","TableRow","TableCell","DialogActions","Button","onClick","color","TableContainer","TableHead","columnIndex","whiteSpace","employee","employeeIndex","id","onClickEmployee","App","Boolean","window","location","hostname","match","defaults","baseURL","process","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dde85773.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport {\n  Grid,\n  Paper,\n  Table,\n  Button,\n  Dialog,\n  Select,\n  MenuItem,\n  TableRow,\n  TableHead,\n  TableCell,\n  TableBody,\n  Typography,\n  TextField,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TableContainer,\n  CircularProgress,\n} from '@material-ui/core';\nimport {\n  Person as PersonIcon,\n  PeopleAlt as PeopleAltIcon,\n} from '@material-ui/icons';\n\nconst useStyles = makeStyles({\n  employeeRow: {\n    cursor: 'pointer'\n  },\n  filtersContainer: {\n    padding: '20px 0',\n  },\n  tableRoot: {\n    position: 'relative',\n  },\n  progressContainer: {\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    position: 'absolute',\n    alignItems: 'center',\n    justifyContent: 'center',\n    background: 'rgba(128, 128, 128, 0.3)'\n  },\n  titleContainer: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  loadingEmployeeDetailsContainer: {\n    minWidth: 200,\n    minHeight: 200,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default function SimpleTable() {\n  const classes = useStyles();\n\n  const [filter, setFilter] = useState({\n    limit: 25,\n    lastName: '',\n    firstName: '',\n  });\n\n  const [userDetails, setUserDetails] = useState({});\n  const [limits, setLimits] = useState([25, 50, 100, 200]);\n  const [loading, setLoading] = useState(false);\n  const [employees, setEmployees] = useState([]);\n  const [userDetailsModalOpen, setUserDetailsModalOpen] = useState(false);\n  const [loadingEmployeeDetails, setLoadingEmployeeDetails] = useState(true);\n\n  const [columns, setColumns] = useState([\n    { title: 'Last Name', key: 'lastName' },\n    { title: 'First Name', key: 'firstName' },\n    { title: 'Username', key: 'userPrincipalName' },\n    { title: 'Office Number', key: 'officePhone' },\n    { title: 'Mobile Number', key: 'mobilePhone' }\n  ]);\n  const [userDetailsRows, setUserDetailsRows] = useState([\n    { title: 'Last Name', key: 'lastName' },\n    { title: 'First Name', key: 'firstName' },\n    { title: 'Username', key: 'userPrincipalName' },\n    { title: 'Job Title', key: 'jobTitle' },\n    { title: 'Department', key: 'department' },\n    { title: 'Office Number', key: 'officePhone' },\n    { title: 'Mobile Number', key: 'mobilePhone' }\n  ]);\n\n  const onClickEmployee = (employee, employeeIndex) => {\n    setUserDetailsModalOpen(true);\n    setLoadingEmployeeDetails(true);\n    axios.get(`/employees/${employee.id}`)\n      .then(({ data }) => {\n        setUserDetails(data);\n      })\n      .finally(() => {\n        setLoadingEmployeeDetails(false);\n      });\n  }\n\n  const handleCloseUserDetailsModal = () => {\n    setUserDetailsModalOpen(false);\n  }\n\n  const handleChangeLimit = (e, { props }) => {\n    setFilter({\n      ...filter,\n      limit: props.value\n    });\n  }\n\n  const handleChangeFilterKey = (e, key) => {\n    setFilter({\n      ...filter,\n      [key]: e.target.value\n    });\n  }\n\n  const fetchEmployees = () => {\n    setLoading(true);\n    axios.get('/employees', {\n        params: filter\n      })\n      .then(({ data }) => {\n        setEmployees(data);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n\n  useEffect(() => {\n    fetchEmployees();\n  }, [filter]);\n\n  return (\n    <Grid container alignItems=\"center\" justify=\"center\">\n      <Grid item container xs={12} md={10} style={{ padding: 15 }}>\n        <Grid item xs={12} style={{ padding: 30 }} component={Paper}>\n          <Typography variant=\"h4\">\n            <PeopleAltIcon /> User List\n          </Typography>\n          <Grid className={classes.filtersContainer} container spacing={4}>\n            <Grid item xs={12} md={4}>\n              <Select\n                fullWidth\n                value={filter.limit}\n                onChange={handleChangeLimit}\n              >\n                {limits.map((limit, limitIndex) => (\n                  <MenuItem value={limit} key={limitIndex}>{limit}</MenuItem>\n                ))}\n              </Select>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <TextField\n                fullWidth\n                value={filter.lastName}\n                placeholder=\"Last Name\"\n                onChange={(e) => handleChangeFilterKey(e, 'lastName')}\n              />\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <TextField\n                fullWidth\n                value={filter.firstName}\n                placeholder=\"First Name\"\n                onChange={(e) => handleChangeFilterKey(e, 'firstName')}\n              />\n            </Grid>\n          </Grid>\n\n          <Dialog\n            fullWidth\n            PaperProps={{\n              style: {\n                margin: 0,\n                width: '100%'\n              }\n            }}\n            open={userDetailsModalOpen}\n            onClose={handleCloseUserDetailsModal}>\n            <DialogTitle className={classes.titleContainer}>\n              <PersonIcon /> Users Details\n            </DialogTitle>\n            <DialogContent>\n              {loadingEmployeeDetails ? (\n                <div className={classes.loadingEmployeeDetailsContainer}>\n                  <CircularProgress size={25} />\n                </div>\n              ) : (\n                <Table>\n                  <TableBody>\n                    {userDetailsRows.map((row, rowIndex) => (\n                      <TableRow key={rowIndex}>\n                        <TableCell component=\"th\">{row.title}</TableCell>\n                        <TableCell>{userDetails[row.key]}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleCloseUserDetailsModal} color=\"primary\">\n                Close\n              </Button>\n            </DialogActions>\n          </Dialog>\n\n          <TableContainer className={classes.tableRoot}>\n            {loading && (\n              <div className={classes.progressContainer}>\n                <CircularProgress size={25} />\n              </div>\n            )}\n            <Table>\n              <TableHead>\n                <TableRow>\n                  {columns.map(({ title }, columnIndex) => (\n                    <TableCell style={{ whiteSpace: 'nowrap' }} key={columnIndex}>{title}</TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {employees.map((employee, employeeIndex) => (\n                  <TableRow\n                    key={employeeIndex}\n                    className={classes.employeeRow}\n                    onClick={() => onClickEmployee(employee, employeeIndex)}>\n                    {columns.map(({ key }, columnIndex) => (\n                      <TableCell key={columnIndex}>{employee[key]}</TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","import React from 'react';\nimport Employees from './pages/Employees';\n\nfunction App() {\n  return (\n    <Employees />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios';\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}